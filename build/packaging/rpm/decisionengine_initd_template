#!/bin/bash
# condor   This is the glideinWMS frontend startup script
# chkconfig: 35 90 30
# description: Starts and stops a glideinWMS frontend

# Emulate function library.
success() {
	echo -en "\\033[60G[\033[32mOK\033[0m]"
	return 0
}

failure() {
	echo -en "\\033[60G[\033[31mFAILED\033[0m]"
	return 1
}

# LSB Exit codes for status:
#0	program is running or service is OK
#1	program is dead and /var/run pid file exists
#2	program is dead and /var/lock lock file exists
#3	program is not running
#4	program or service status is unknown
#5-99	reserved for future LSB use
#100-149	reserved for distribution use
#150-199	reserved for application use
#200-254	reserved
# LSB Exit codes for non status:
#1	generic or unspecified error (current practice)
#2	invalid or excess argument(s)
#3	unimplemented feature (for example, "reload")
#4	user had insufficient privilege
#5	program is not installed
#6	program is not configured
#7	program is not running
#8-99	reserved for future LSB use
#100-149	reserved for distribution use
#150-199	reserved for application use
#200-254	reserved
RET_OK=0
RET_ERROR=1
RET_STATUS_DEADWPIDFILE=1
RET_STATUS_DEADWLOCK=2
RET_STATUS_NOT_RUNNING=3
RET_STATUS_UNKNOWN=4
RET_BAD_SYNTAX=2
RET_NOT_IMPLEMENTED=3
RET_NO_PRIVILEGE=4
RET_NOT_INSTALLED=5
RET_NOT_CONFIGURED=6
RET_NOT_RUNNING=7


#[ -f /etc/sysconfig/gwms-frontend ] && . /etc/sysconfig/gwms-frontend

SCRIPT_NAME="`basename $0`"

. /etc/rc.d/init.d/functions
# RPM installation (defaults and binaries)
LOG_FILE_STARTUP=/var/log/decisionengine/startup.log
DEFAULT_WRITEBACK=no
BIN_DIR=/usr/sbin
DECISIONENGINE_START=${BIN_DIR}/decision-engine
DECISIONENGINE_USER=decisionengine
# Overriding variables values for RPM installation
def_frontend_config=/etc/decisionengine/decisionengine.conf

check_installed () {
    # check to see if the program is installed
    # look for FRONTEND_START
    if [ -x "$DECISIONENGINE_START" ]; then
        return 0
    fi
    echo -n "The decision engine is not installed correctly"
    failure
    echo
    exit $RET_NOT_INSTALLED
}

check_configured () {
    # check if some files created during the configuration (upgrade/reconfig) exist
    if [ -r "$def_frontend_config" ]; then
        return 0
    else
        echo -n "The decision engine configuration file $def_frontend_config not found"
    fi
    failure
    echo
    exit $RET_NOT_CONFIGURED
}

invoke_as_frontend() {
    # parameters are a string with the command to invoke
    # e.g. "ls -al \"$directory\""
    local user_to_use=$FRONTEND_USER
    local user_id=$(id -u $(get_user))
    if [ $user_id -eq 0 ]; then
        # It's root, change user
        $SU_COMMAND $user_to_use -c "$@"
        #with daemon: daemon --user=$user_to_use "$@" &>/dev/null &
        return $?
    elif [ $user_id = $FILE_OWNER ]; then
        # It's the owner, invoke directly, both su and runuser would ask for password
        eval "$@"
        #with daemon: daemon "$@" &>/dev/null &
        return $?
	else
        # someone else, raise error
        echo "ERROR: you must be the owner of ${def_frontend_config}."
        #return 4
        exit $RET_NO_PRIVILEGE
    fi
}

help_usage() {
    echo "Show help here"
}

start() {
        check_installed
        check_configured
        echo -n "Starting decision engine $id_str: "

        # TODO: Check if the decision engine is already running
        # forcing daemon to continue, the frontend will check the pidfile
        daemon --user $DECISIONENGINE_USER --pidfile="/var/lock/decisionengine/decisionengine.lock" -2 "${DECISIONENGINE_START} 2>$LOG_FILE_STARTUP 1>&2 </dev/null &"
}

stop() {
        check_installed
        echo -n "Shutting down decision engine"

	/usr/bin/de-client --stop
        MYRETVAL=$?

        if [ $MYRETVAL -ne 0 ]; then
            echo -n "Invocation failed "
            failure
            RETVAL=$?
            echo
            return $RETVAL
        fi

        success
        RETVAL=$?
        echo
}

restart() {
    stop
    start
}

reload() {
    echo "Reload not implemented"
}

case $1 in
        start)
            start
            ;;
        stop)
            stop
            ;;
        restart)
            restart
            ;;
        reload)
            reload
            ;;
        *)
            help_usage
            exit $RET_NOT_IMPLEMENTED
esac

exit $RETVAL
